// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/018bf/example/internal/domain/usecases (interfaces: ApproachUseCase)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/example/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockApproachUseCase is a mock of ApproachUseCase interface.
type MockApproachUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockApproachUseCaseMockRecorder
}

// MockApproachUseCaseMockRecorder is the mock recorder for MockApproachUseCase.
type MockApproachUseCaseMockRecorder struct {
	mock *MockApproachUseCase
}

// NewMockApproachUseCase creates a new mock instance.
func NewMockApproachUseCase(ctrl *gomock.Controller) *MockApproachUseCase {
	mock := &MockApproachUseCase{ctrl: ctrl}
	mock.recorder = &MockApproachUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApproachUseCase) EXPECT() *MockApproachUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockApproachUseCase) Create(arg0 context.Context, arg1 *models.ApproachCreate) (*models.Approach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Approach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockApproachUseCaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApproachUseCase)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockApproachUseCase) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApproachUseCaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApproachUseCase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockApproachUseCase) Get(arg0 context.Context, arg1 string) (*models.Approach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.Approach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockApproachUseCaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApproachUseCase)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockApproachUseCase) List(arg0 context.Context, arg1 *models.ApproachFilter) ([]*models.Approach, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*models.Approach)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockApproachUseCaseMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApproachUseCase)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockApproachUseCase) Update(arg0 context.Context, arg1 *models.ApproachUpdate) (*models.Approach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*models.Approach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockApproachUseCaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApproachUseCase)(nil).Update), arg0, arg1)
}
