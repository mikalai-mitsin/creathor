// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: examplepb/v1/arch.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchServiceClient is the client API for ArchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchServiceClient interface {
	Create(ctx context.Context, in *ArchCreate, opts ...grpc.CallOption) (*Arch, error)
	Get(ctx context.Context, in *ArchGet, opts ...grpc.CallOption) (*Arch, error)
	Update(ctx context.Context, in *ArchUpdate, opts ...grpc.CallOption) (*Arch, error)
	Delete(ctx context.Context, in *ArchDelete, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ArchFilter, opts ...grpc.CallOption) (*ListArch, error)
}

type archServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchServiceClient(cc grpc.ClientConnInterface) ArchServiceClient {
	return &archServiceClient{cc}
}

func (c *archServiceClient) Create(ctx context.Context, in *ArchCreate, opts ...grpc.CallOption) (*Arch, error) {
	out := new(Arch)
	err := c.cc.Invoke(ctx, "/examplepb.v1.ArchService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archServiceClient) Get(ctx context.Context, in *ArchGet, opts ...grpc.CallOption) (*Arch, error) {
	out := new(Arch)
	err := c.cc.Invoke(ctx, "/examplepb.v1.ArchService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archServiceClient) Update(ctx context.Context, in *ArchUpdate, opts ...grpc.CallOption) (*Arch, error) {
	out := new(Arch)
	err := c.cc.Invoke(ctx, "/examplepb.v1.ArchService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archServiceClient) Delete(ctx context.Context, in *ArchDelete, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/examplepb.v1.ArchService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archServiceClient) List(ctx context.Context, in *ArchFilter, opts ...grpc.CallOption) (*ListArch, error) {
	out := new(ListArch)
	err := c.cc.Invoke(ctx, "/examplepb.v1.ArchService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchServiceServer is the server API for ArchService service.
// All implementations should embed UnimplementedArchServiceServer
// for forward compatibility
type ArchServiceServer interface {
	Create(context.Context, *ArchCreate) (*Arch, error)
	Get(context.Context, *ArchGet) (*Arch, error)
	Update(context.Context, *ArchUpdate) (*Arch, error)
	Delete(context.Context, *ArchDelete) (*emptypb.Empty, error)
	List(context.Context, *ArchFilter) (*ListArch, error)
}

// UnimplementedArchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedArchServiceServer struct {
}

func (UnimplementedArchServiceServer) Create(context.Context, *ArchCreate) (*Arch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedArchServiceServer) Get(context.Context, *ArchGet) (*Arch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedArchServiceServer) Update(context.Context, *ArchUpdate) (*Arch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedArchServiceServer) Delete(context.Context, *ArchDelete) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedArchServiceServer) List(context.Context, *ArchFilter) (*ListArch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeArchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchServiceServer will
// result in compilation errors.
type UnsafeArchServiceServer interface {
	mustEmbedUnimplementedArchServiceServer()
}

func RegisterArchServiceServer(s grpc.ServiceRegistrar, srv ArchServiceServer) {
	s.RegisterService(&ArchService_ServiceDesc, srv)
}

func _ArchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examplepb.v1.ArchService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchServiceServer).Create(ctx, req.(*ArchCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examplepb.v1.ArchService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchServiceServer).Get(ctx, req.(*ArchGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examplepb.v1.ArchService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchServiceServer).Update(ctx, req.(*ArchUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examplepb.v1.ArchService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchServiceServer).Delete(ctx, req.(*ArchDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examplepb.v1.ArchService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchServiceServer).List(ctx, req.(*ArchFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchService_ServiceDesc is the grpc.ServiceDesc for ArchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "examplepb.v1.ArchService",
	HandlerType: (*ArchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ArchService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ArchService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArchService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArchService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ArchService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examplepb/v1/arch.proto",
}
