package errs

import (
	"encoding/json"
	"errors"
	"github.com/stretchr/testify/assert"
	"reflect"
	"testing"
)

func TestError_Cause(t *testing.T) {
	cause := errors.New("test error")
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
		Err     error
	}
	type args struct {
		tgt error
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   error
	}{
		{
			name: "ok true",
			fields: fields{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{Key: "details", Value: "bar"},
				},
				Err: cause,
			},
			args: args{
				tgt: cause,
			},
			want: cause,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
				Err:     tt.fields.Err,
			}
			got := e.Cause()
			if !errors.Is(got, tt.want) {
				t.Errorf("Cause() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestError_AddParam(t *testing.T) {
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
	}
	type args struct {
		key   string
		value string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *Error
	}{
		{
			name: "ok",
			fields: fields{
				Code:    0,
				Message: "",
				Params:  Params{},
			},
			args: args{
				key:   "Betty",
				value: "Piptik",
			},
			want: &Error{
				Code:    0,
				Message: "",
				Params: Params{
					{Key: "Betty", Value: "Piptik"},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
			}
			e.AddParam(tt.args.key, tt.args.value)
			if !reflect.DeepEqual(e, tt.want) {
				t.Errorf("Is() = %v, want %v", e, tt.want)
			}
		})
	}
}

func TestError_Error(t *testing.T) {
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		{
			name: "ok",
			fields: fields{
				Code:    16,
				Message: "This is error.",
				Params: Params{
					{"first", "foo"},
					{"second", "bar"},
				},
			},
			want: "{\"code\":16,\"message\":\"This is error.\",\"params\":[{\"key\":\"first\",\"value\":\"foo\"},{\"key\":\"second\",\"value\":\"bar\"}]}",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
			}
			if got := e.Error(); got != tt.want {
				t.Errorf("Error() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestError_Is(t *testing.T) {
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
		Cause   error
	}
	type args struct {
		tgt error
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		{
			name: "ok true",
			fields: fields{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{Key: "details", Value: "bar"},
				},
				Cause: nil,
			},
			args: args{
				tgt: NewUnexpectedBehaviorError("bar"),
			},
			want: true,
		},
		{
			name: "with cause true",
			fields: fields{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{Key: "details", Value: "bar"},
				},
				Cause: errors.New("test 2"),
			},
			args: args{
				tgt: NewUnexpectedBehaviorError("bar").WithCause(errors.New("test 2")),
			},
			want: true,
		},
		{
			name: "with cause false",
			fields: fields{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{Key: "details", Value: "bar"},
				},
				Cause: errors.New("test 3"),
			},
			args: args{
				tgt: NewUnexpectedBehaviorError("bar").WithCause(errors.New("test 2")),
			},
			want: false,
		},
		{
			name: "ok false",
			fields: fields{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{Key: "details", Value: "no bar"},
				},
				Cause: nil,
			},
			args: args{
				tgt: NewUnexpectedBehaviorError("bar"),
			},
			want: false,
		},
		{
			name: "ok false",
			fields: fields{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{"details", "no bar"},
				},
			},
			args: args{
				tgt: errors.New("bar"),
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
				Err:     tt.fields.Cause,
			}
			if got := errors.Is(e, tt.args.tgt); got != tt.want {
				t.Errorf("Is() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestError_SetCode(t *testing.T) {
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
	}
	type args struct {
		code ErrorCode
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *Error
	}{
		{
			name: "ok",
			fields: fields{
				Code:    0,
				Message: "",
				Params:  nil,
			},
			args: args{
				code: 16,
			},
			want: &Error{
				Code:    16,
				Message: "",
				Params:  nil,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
			}
			e.SetCode(tt.args.code)
			if !reflect.DeepEqual(e, tt.want) {
				t.Errorf("Is() = %v, want %v", e, tt.want)
			}
		})
	}
}

func TestError_SetMessage(t *testing.T) {
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
	}
	type args struct {
		message string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *Error
	}{
		{
			name: "ok",
			fields: fields{
				Code:    0,
				Message: "",
				Params:  nil,
			},
			args: args{
				message: "this is message!",
			},
			want: &Error{
				Code:    0,
				Message: "this is message!",
				Params:  nil,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
			}
			e.SetMessage(tt.args.message)
			if !reflect.DeepEqual(e, tt.want) {
				t.Errorf("Is() = %v, want %v", e, tt.want)
			}
		})
	}
}

func TestError_SetParams(t *testing.T) {
	type fields struct {
		Code    ErrorCode
		Message string
		Params  Params
	}
	type args struct {
		params Params
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *Error
	}{
		{
			name: "ok",
			fields: fields{
				Code:    0,
				Message: "",
				Params:  nil,
			},
			args: args{
				params: Params{
					{Key: "new", Value: "key"},
					{Key: "ad", Value: "off"},
				},
			},
			want: &Error{
				Code:    0,
				Message: "",
				Params: Params{
					{"new", "key"},
					{"ad", "off"},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Error{
				Code:    tt.fields.Code,
				Message: tt.fields.Message,
				Params:  tt.fields.Params,
			}
			e.SetParams(tt.args.params)
			if !reflect.DeepEqual(e, tt.want) {
				t.Errorf("Is() = %v, want %v", e, tt.want)
			}
		})
	}
}

func TestNewError(t *testing.T) {
	type args struct {
		code    ErrorCode
		message string
	}
	tests := []struct {
		name string
		args args
		want *Error
	}{
		{
			name: "ok",
			args: args{
				code:    16,
				message: "New error",
			},
			want: &Error{
				Code:    16,
				Message: "New error",
				Params:  nil,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewError(tt.args.code, tt.args.message); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewError() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNewInvalidFormError(t *testing.T) {
	tests := []struct {
		name string
		want *Error
	}{
		{
			name: "ok",
			want: NewError(
				ErrorCodeInvalidArgument,
				"The form sent is not valid, please correct the errors below.",
			),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewInvalidFormError(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewInvalidFormError() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNewUnexpectedBehaviorError(t *testing.T) {
	type args struct {
		details string
	}
	tests := []struct {
		name string
		args args
		want *Error
	}{
		{
			name: "ok",
			args: args{
				details: "test details",
			},
			want: &Error{
				Code:    13,
				Message: "Unexpected behavior.",
				Params: Params{
					{Key: "details", Value: "test details"},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewUnexpectedBehaviorError(tt.args.details); !reflect.DeepEqual(
				got,
				tt.want,
			) {
				t.Errorf("NewUnexpectedBehaviorError() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNewUnexpectedBehaviorErrorAsJson(t *testing.T) {
	type args struct {
		err *Error
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "ok",
			args: args{
				err: NewUnexpectedBehaviorError("i have problem").
					WithCause(errors.New("simple error")).
					WithParams(Param{"user_id", "12"}).
					WithParam("test", "json test"),
			},
			want: []byte(`{"code":13,"message":"Unexpected behavior.","params":[{"key":"details","value":"i have problem"},{"key":"user_id","value":"12"},{"key":"test","value":"json test"}]}`),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, _ := json.Marshal(tt.args.err)
			assert.Equal(t, string(tt.want), string(got))
		})
	}
}
