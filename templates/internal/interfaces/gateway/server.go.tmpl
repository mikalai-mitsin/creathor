package rest

import (
    "context"
    "{{ .Module }}/internal/configs"
    {{ .ProtoPackage }} "{{ .Module }}/pkg/{{ .ProtoPackage }}/v1"
    "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
    "google.golang.org/grpc"
    "google.golang.org/grpc/credentials/insecure"
    "net/http"

    "{{ .Module }}/pkg/log"
)

type Server struct {
    serve  *runtime.ServeMux
    config *configs.Config
    logger log.Logger
}

func NewServer(
    logger log.Logger,
    config *configs.Config,
) *Server {
    serve := runtime.NewServeMux()
    serve.HandlePath(http.MethodGet, "/", func(_ http.ResponseWriter, _ *http.Request, _ map[string]string) {})
    serve.HandlePath(http.MethodGet, "/health", func(_ http.ResponseWriter, _ *http.Request, _ map[string]string) {})
    return &Server{
        serve: serve,
        config: config,
        logger: logger,
    }
}

func(s *Server) Start(ctx context.Context) error {
    ctx, cancel := context.WithCancel(ctx)
    defer cancel()
    opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
{{- if .Auth }}
    examplepb.RegisterAuthServiceHandlerFromEndpoint(ctx, s.serve, s.config.BindAddr, opts)
    examplepb.RegisterUserServiceHandlerFromEndpoint(ctx, s.serve, s.config.BindAddr, opts)
{{- else }}
    _ = opts
{{- end }}
    return http.ListenAndServe(":8001", s.serve)
}

func(s *Server) Stop(_ context.Context) error {
    return nil
}