package configs

import (
    "{{ .Module }}/internal/pkg/errs"
    "github.com/ilyakaznacheev/cleanenv"
    "{{ .Module }}/internal/pkg/postgres"
    {{- if .HTTPEnabled }}
    "{{ .Module }}/internal/pkg/http"
    {{- end }}
    {{- if .GRPCEnabled }}
    "{{ .Module }}/internal/pkg/grpc"
    {{- end }}
    {{- if .KafkaEnabled }}
    "{{ .Module }}/internal/pkg/kafka"
    {{- end }}
)

{{- if .UptraceEnabled }}
type otel struct {
    URL         string `env:"OTEL_URL" toml:"url"`
    Enabled     bool   `env:"OTEL_ENABLED" toml:"enabled"`
    Environment string `env:"OTEL_ENVIRONMENT" toml:"environment"`
}
{{- end }}

type Config struct {
    LogLevel string   `env:"LOG_LEVEL" toml:"log_level" env-default:"debug"`
    Database *postgres.Config `toml:"database"`
{{- if .UptraceEnabled }}
    Otel     otel     `toml:"otel"`
{{- end }}
{{- if .KafkaEnabled }}
    Kafka    *kafka.Config    `toml:"kafka"`
{{- end }}
{{- if .HTTPEnabled }}
    HTTP    *http.Config    `toml:"http"`
{{- end }}
{{- if .GRPCEnabled }}
    GRPC    *grpc.Config    `toml:"grpc"`
{{- end }}
}

func ParseConfig(configPath string) (*Config, error) {
    config := &Config{}
    if configPath != "" {
        if err := cleanenv.ReadConfig(configPath, config); err != nil {
            return nil, errs.NewUnexpectedBehaviorError(err.Error())
        }
    } else {
        if err := cleanenv.ReadEnv(config); err != nil {
            return nil, errs.NewUnexpectedBehaviorError(err.Error())
        }
    }
    return config, nil
}
