package usecases

import (
    "context"
    "errors"
    "reflect"
    "testing"

    "{{ .Module }}/internal/pkg/errs"
    "{{ .Module }}/internal/pkg/log"
    "{{ .Module }}/internal/app/{{ .DirName }}/entities"
    mock_entities "{{ .Module }}/internal/app/{{ .DirName }}/entities/mock"
    userMockEntities "{{ .Module }}/internal/app/user/entities/mock"
    userEntities "{{ .Module }}/internal/app/user/entities"

    "go.uber.org/mock/gomock"
    "github.com/jaswdr/faker"
    "github.com/stretchr/testify/assert"

    "{{ .Module }}/internal/pkg/clock"
    "{{ .Module }}/internal/pkg/uuid"
)

func TestNew{{ .GetUseCaseTypeName }}(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.ServiceTypeName }} := NewMock{{ .GetServiceInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    type args struct {
        {{ .Config.ServiceVariableName }} {{ .GetServiceInterfaceName }}
        logger          logger
    }
    tests := []struct {
        name  string
        setup func()
        args  args
        want  *{{ .GetUseCaseTypeName }}
    }{
        {
            name:  "ok",
            setup: func() {},
            args: args{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            want: &{{ .GetUseCaseTypeName }}{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            got := New{{ .GetUseCaseTypeName }}(tt.args.{{ .Config.ServiceVariableName }}, tt.args.logger)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .GetUseCaseTypeName }}_Get(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.ServiceTypeName }} := NewMock{{ .GetServiceInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    {{ .Config.Variable }} := mock_entities.New{{ .Config.ModelName }}(t)
    type fields struct {
        {{ .Config.ServiceVariableName }} {{ .GetServiceInterfaceName }}
        logger          logger
    }
    type args struct {
        ctx context.Context
        id  uuid.UUID
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *entities.{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    Get(ctx, {{ .Config.Variable }}.ID).
                    Return({{ .Config.Variable }}, nil)
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                id:  uuid.UUID({{ .Config.Variable }}.ID),
            },
            want:    {{ .Config.Variable }},
            wantErr: nil,
        },
        {
            name: "{{ .Config.ModelName }} not found",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    Get(ctx, {{ .Config.Variable }}.ID).
                    Return(nil, errs.NewEntityNotFoundError())
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:         ctx,
                id:          {{ .Config.Variable }}.ID,
            },
            want:    nil,
            wantErr: errs.NewEntityNotFoundError(),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            i := &{{ .GetUseCaseTypeName }}{
                {{ .Config.ServiceVariableName }}: tt.fields.{{ .Config.ServiceVariableName }},
                logger:          tt.fields.logger,
            }
            got, err := i.Get(tt.args.ctx, tt.args.id)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .GetUseCaseTypeName }}_Create(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.ServiceTypeName }} := NewMock{{ .GetServiceInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    {{ .Config.Variable }} := mock_entities.New{{ .Config.ModelName }}(t)
    create := mock_entities.New{{ .Config.CreateTypeName }}(t)
    type fields struct {
        {{ .Config.ServiceVariableName }} {{ .GetServiceInterfaceName }}
        logger          logger
    }
    type args struct {
        ctx    context.Context
        create *entities.{{ .Config.CreateTypeName }}
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *entities.{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().Create(ctx, create).Return({{ .Config.Variable }}, nil)
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:    ctx,
                create: create,
            },
            want:    {{ .Config.Variable }},
            wantErr: nil,
        },
        {
            name: "create error",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    Create(ctx, create).
                    Return(nil, errs.NewUnexpectedBehaviorError("c u"))
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:    ctx,
                create: create,
            },
            want:    nil,
            wantErr: errs.NewUnexpectedBehaviorError("c u"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            i := &{{ .GetUseCaseTypeName }}{
                {{ .Config.ServiceVariableName }}: tt.fields.{{ .Config.ServiceVariableName }},
                logger:          tt.fields.logger,
            }
            got, err := i.Create(tt.args.ctx, tt.args.create)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .GetUseCaseTypeName }}_Update(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.ServiceTypeName }} := NewMock{{ .GetServiceInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    {{ .Config.Variable }} := mock_entities.New{{ .Config.ModelName }}(t)
    update := mock_entities.New{{ .Config.UpdateTypeName }}(t)
    type fields struct {
        {{ .Config.ServiceVariableName }} {{ .GetServiceInterfaceName }}
        logger          logger
    }
    type args struct {
        ctx    context.Context
        update *entities.{{ .Config.UpdateTypeName }}
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *entities.{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().Update(ctx, update).Return({{ .Config.Variable }}, nil)
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:    ctx,
                update: update,
            },
            want:    {{ .Config.Variable }},
            wantErr: nil,
        },
        {
            name: "update error",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    Update(ctx, update).
                    Return(nil, errs.NewUnexpectedBehaviorError("d 2"))
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:    ctx,
                update: update,
            },
            want:    nil,
            wantErr: errs.NewUnexpectedBehaviorError("d 2"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            i := &{{ .GetUseCaseTypeName }}{
                {{ .Config.ServiceVariableName }}: tt.fields.{{ .Config.ServiceVariableName }},
                logger:          tt.fields.logger,
            }
            got, err := i.Update(tt.args.ctx, tt.args.update)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .GetUseCaseTypeName }}_Delete(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.ServiceTypeName }} := NewMock{{ .GetServiceInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    {{ .Config.Variable }} := mock_entities.New{{ .Config.ModelName }}(t)
    type fields struct {
        {{ .Config.ServiceVariableName }} {{ .GetServiceInterfaceName }}
        logger          logger
    }
    type args struct {
        ctx context.Context
        id  uuid.UUID
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    Delete(ctx, {{ .Config.Variable }}.ID).
                    Return(nil)
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                id:  {{ .Config.Variable }}.ID,
            },
            wantErr: nil,
        },
        {
            name: "delete error",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    Delete(ctx, {{ .Config.Variable }}.ID).
                    Return(errs.NewUnexpectedBehaviorError("d 2"))
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                id:  {{ .Config.Variable }}.ID,
            },
            wantErr: errs.NewUnexpectedBehaviorError("d 2"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            i := &{{ .GetUseCaseTypeName }}{
                {{ .Config.ServiceVariableName }}: tt.fields.{{ .Config.ServiceVariableName }},
                logger:          tt.fields.logger,
            }
            err := i.Delete(tt.args.ctx, tt.args.id)
            assert.ErrorIs(t, err, tt.wantErr)
        })
    }
}

func Test{{ .GetUseCaseTypeName }}_List(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.ServiceTypeName }} := NewMock{{ .GetServiceInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    filter := mock_entities.New{{ .Config.FilterTypeName }}(t)
    count := faker.New().UInt64Between(2, 20)
    {{ .Config.ListVariable }} := make([]*entities.{{ .Config.ModelName }}, 0, count)
    for i := uint64(0); i < count; i++ {
        {{ .Config.ListVariable }} = append({{ .Config.ListVariable }}, mock_entities.New{{ .Config.ModelName }}(t))
    }
    type fields struct {
        {{ .Config.ServiceVariableName }} {{ .GetServiceInterfaceName }}
        logger          logger
    }
    type args struct {
        ctx         context.Context
        filter      *entities.{{ .Config.FilterTypeName }}
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    []*entities.{{ .Config.ModelName }}
        want1   uint64
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    List(ctx, filter).
                    Return({{ .Config.ListVariable }}, count, nil)
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:         ctx,
                filter:      filter,
            },
            want:    {{ .Config.ListVariable }},
            want1:   count,
            wantErr: nil,
        },
        {
            name: "list error",
            setup: func() {
                mock{{ .Config.ServiceTypeName }}.EXPECT().
                    List(ctx, filter).
                    Return(nil, uint64(0), errs.NewUnexpectedBehaviorError("l e"))
            },
            fields: fields{
                {{ .Config.ServiceVariableName }}: mock{{ .Config.ServiceTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx:         ctx,
                filter:      filter,
            },
            want:    nil,
            want1:   0,
            wantErr: errs.NewUnexpectedBehaviorError("l e"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            i := &{{ .GetUseCaseTypeName }}{
                {{ .Config.ServiceVariableName }}: tt.fields.{{ .Config.ServiceVariableName }},
                logger:          tt.fields.logger,
            }
            got, got1, err := i.List(tt.args.ctx, tt.args.filter)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
            assert.Equal(t, tt.want1, got1)
        })
    }
}
