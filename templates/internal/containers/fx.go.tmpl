package containers

import (
    "context"

	grpcInterface "{{ .Module }}/internal/interfaces/grpc"
	postgresInterface "{{ .Module }}/internal/interfaces/postgres"
	restInterface "{{ .Module }}/internal/interfaces/rest"
	jwtRepositories "{{ .Module }}/internal/repositories/jwt"
	postgresRepositories "{{ .Module }}/internal/repositories/postgres"

    "{{ .Module }}/pkg/log"
    "go.uber.org/fx/fxevent"

    "{{ .Module }}/internal/interceptors"
    "{{ .Module }}/internal/usecases"

    "{{ .Module }}/pkg/clock"

    "{{ .Module }}/internal/configs"
    "go.uber.org/fx"
)

var FXModule = fx.Options(
    fx.WithLogger(
        func(logger log.Logger) fxevent.Logger {
            return logger
        },
    ),
	fx.Provide(
        context.Background,
        configs.ParseConfig,
        clock.NewRealClock,
        postgresInterface.NewDatabase,
        postgresInterface.NewMigrateManager,
        grpcInterface.NewServer,
        restInterface.NewServer,
        func(config *configs.Config) (log.Logger, error) {
            return log.NewLog(config.LogLevel)
        },
{{- if .Auth }}
        usecases.NewAuthUseCase,
        interceptors.NewAuthInterceptor,
        jwtRepositories.NewAuthRepository,
        postgresRepositories.NewPermissionRepository,
        grpcInterface.NewAuthMiddleware,
        grpcInterface.NewAuthServiceServer,
        restInterface.NewAuthHandler,
        restInterface.NewAuthMiddleware,
        usecases.NewUserUseCase,
        interceptors.NewUserInterceptor,
        postgresRepositories.NewPostgresUserRepository,
        grpcInterface.NewUserServiceServer,
        restInterface.NewUserHandler,
{{- end }}
    ),
)

func NewGRPC{{ .Name | Title }}(config string) *fx.App {
    app := fx.New(
        fx.Provide(func() string { return config }),
        FXModule,
		fx.Invoke(func(lifecycle fx.Lifecycle, server *grpcInterface.Server) {
			lifecycle.Append(fx.Hook{
				OnStart: server.Start,
				OnStop:  server.Stop,
			})
		}),
    )
    return app
}

func NewREST{{ .Name | Title }}(config string) *fx.App {
    app := fx.New(
        fx.Provide(func() string { return config }),
        FXModule,
		fx.Invoke(func(lifecycle fx.Lifecycle, server *restInterface.Server) {
			lifecycle.Append(fx.Hook{
				OnStart: server.Start,
				OnStop:  server.Stop,
			})
		}),
    )
    return app
}

func NewMigrate(config string) *fx.App {
	app := fx.New(
		fx.Provide(func() string { return config }),
        FXModule,
        fx.Invoke(func(lifecycle fx.Lifecycle, manager *postgresInterface.MigrateManager) {
            lifecycle.Append(fx.Hook{
                OnStart: manager.Up,
            })
        }),
	)
	return app
}
