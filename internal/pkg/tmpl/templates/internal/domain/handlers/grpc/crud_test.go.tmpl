package handlers

import (
    "context"
    "{{ .Module }}/internal/pkg/errs"

    "{{ .Module }}/internal/app/{{ .DirName }}/entities"
    mockEntities "{{ .Module }}/internal/app/{{ .DirName }}/entities/mock"
    "{{ .Module }}/internal/pkg/pointer"
    "{{ .Module }}/internal/pkg/uuid"
    {{ .Config.ProtoPackage }} "{{ .Module }}/pkg/{{ .Config.ProtoPackage }}/v1"
    "go.uber.org/mock/gomock"
    "google.golang.org/protobuf/types/known/emptypb"
    "google.golang.org/protobuf/types/known/timestamppb"
    "google.golang.org/protobuf/types/known/wrapperspb"
    "github.com/jaswdr/faker"
    "github.com/stretchr/testify/assert"
    "testing"
)

func TestNew{{ .Config.GRPCHandlerTypeName }}(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.UseCaseTypeName }} := NewMock{{ .GetUseCaseInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    type args struct {
        {{ .Config.UseCaseVariableName }} {{ .GetUseCaseInterfaceName }}
        logger             logger
    }
    tests := []struct {
        name string
        args args
        want {{ .Config.ProtoPackage }}.{{ .Config.GRPCHandlerTypeName }}
    }{
        {
            name: "ok",
            args: args{
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            want: &{{ .Config.GRPCHandlerTypeName }}{
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            got := New{{ .Config.GRPCHandlerTypeName }}(tt.args.{{ .Config.UseCaseVariableName }}, tt.args.logger)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .Config.GRPCHandlerTypeName }}_Create(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.UseCaseTypeName }} := NewMock{{ .GetUseCaseInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    // create := mockEntities.New{{ .Config.CreateTypeName }}(t)
    {{ .Config.Variable }} := mockEntities.New{{ .Config.ModelName }}(t)
    type fields struct {
        Unimplemented{{ .Config.GRPCHandlerTypeName }} {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}
        {{ .Config.UseCaseVariableName }} {{ .GetUseCaseInterfaceName }}
        logger logger
    }
    type args struct {
        ctx   context.Context
        input *{{ .Config.ProtoPackage }}.{{ .Config.CreateTypeName }}
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.
                    EXPECT().
                    Create(ctx, gomock.Any()).
                    Return({{ .Config.Variable }}, nil)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.CreateTypeName }}{},
            },
            want:    decode{{ .Config.ModelName }}({{ .Config.Variable }}),
            wantErr: nil,
        },
        {
            name: "usecase error",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.
                    EXPECT().
                    Create(ctx, gomock.Any()).
                    Return(entities.{{ .Config.ModelName }}{}, errs.NewUnexpectedBehaviorError("usecase error")).
                    Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.CreateTypeName }}{},
            },
            want:    nil,
            wantErr: errs.NewUnexpectedBehaviorError("usecase error"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            s := {{ .Config.GRPCHandlerTypeName }}{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: tt.fields.Unimplemented{{ .Config.GRPCHandlerTypeName }},
                {{ .Config.UseCaseVariableName }}:                tt.fields.{{ .Config.UseCaseVariableName }},
                logger:                            tt.fields.logger,
            }
            got, err := s.Create(tt.args.ctx, tt.args.input)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .Config.GRPCHandlerTypeName }}_Delete(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.UseCaseTypeName }} := NewMock{{ .GetUseCaseInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    id := uuid.NewUUID()
    type fields struct {
        Unimplemented{{ .Config.GRPCHandlerTypeName }} {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}
        {{ .Config.UseCaseVariableName }}                {{ .GetUseCaseInterfaceName }}
        logger                            logger
    }
    type args struct {
        ctx   context.Context
        input *{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}Delete
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *emptypb.Empty
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().Delete(ctx, id).Return(nil).Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}Delete{
                    Id: id.String(),
                },
            },
            want:    &emptypb.Empty{},
            wantErr: nil,
        },
        {
            name: "usecase error",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().Delete(ctx, id).
                    Return(errs.NewUnexpectedBehaviorError("i error")).
                    Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}Delete{
                    Id: id.String(),
                },
            },
            want: nil,
            wantErr: &errs.Error{
                Code:    13,
                Message: "Unexpected behavior.",
                Params: errs.Params{ {Key: "details", Value: "i error"} },
            },
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            s := {{ .Config.GRPCHandlerTypeName }}{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: tt.fields.Unimplemented{{ .Config.GRPCHandlerTypeName }},
                {{ .Config.UseCaseVariableName }}:                tt.fields.{{ .Config.UseCaseVariableName }},
                logger:                            tt.fields.logger,
            }
            got, err := s.Delete(tt.args.ctx, tt.args.input)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .Config.GRPCHandlerTypeName }}_Get(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.UseCaseTypeName }} := NewMock{{ .GetUseCaseInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    {{ .Config.Variable }} := mockEntities.New{{ .Config.ModelName }}(t)
    type fields struct {
        Unimplemented{{ .Config.GRPCHandlerTypeName }} {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}
        {{ .Config.UseCaseVariableName }}                {{ .GetUseCaseInterfaceName }}
        logger                            logger
    }
    type args struct {
        ctx   context.Context
        input *{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}Get
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().Get(ctx, {{ .Config.Variable }}.ID).Return({{ .Config.Variable }}, nil).Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}Get{
                    Id: string({{ .Config.Variable }}.ID),
                },
            },
            want:    decode{{ .Config.ModelName }}({{ .Config.Variable }}),
            wantErr: nil,
        },
        {
            name: "usecase error",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().Get(ctx, {{ .Config.Variable }}.ID).
                    Return(entities.{{ .Config.ModelName }}{}, errs.NewUnexpectedBehaviorError("i error")).
                    Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}Get{
                    Id: string({{ .Config.Variable }}.ID),
                },
            },
            want:    nil,
            wantErr: errs.NewUnexpectedBehaviorError("i error"),
        },
    }
    for _, tt := range tests {
        tt.setup()
        t.Run(tt.name, func(t *testing.T) {
            s := {{ .Config.GRPCHandlerTypeName }}{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: tt.fields.Unimplemented{{ .Config.GRPCHandlerTypeName }},
                {{ .Config.UseCaseVariableName }}:                tt.fields.{{ .Config.UseCaseVariableName }},
                logger:                            tt.fields.logger,
            }
            got, err := s.Get(tt.args.ctx, tt.args.input)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .Config.GRPCHandlerTypeName }}_List(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.UseCaseTypeName }} := NewMock{{ .GetUseCaseInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    filter := mockEntities.New{{ .Config.FilterTypeName }}(t)
    var ids []uuid.UUID
    var stringIDs []string
    count := faker.New().UInt64Between(2, 20)
    response := &{{ .Config.ProtoPackage }}.List{{ .Config.ModelName }}{
        Items: make([]*{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}, 0, int(count)),
        Count:    count,
    }
    {{ .Config.ListVariable }} := make([]entities.{{ .Config.ModelName }}, 0, int(count))
    for i := 0; i < int(count); i++ {
        a := mockEntities.New{{ .Config.ModelName }}(t)
        ids = append(ids, a.ID)
        stringIDs = append(stringIDs, string(a.ID))
        {{ .Config.ListVariable }} = append({{ .Config.ListVariable }}, a)
        response.Items = append(response.Items, decode{{ .Config.ModelName }}(a))
    }
    filter.IDs = ids
    type fields struct {
        Unimplemented{{ .Config.GRPCHandlerTypeName }} {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}
        {{ .Config.UseCaseVariableName }}                {{ .GetUseCaseInterfaceName }}
        logger                            logger
    }
    type args struct {
        ctx   context.Context
        input *{{ .Config.ProtoPackage }}.{{ .Config.FilterTypeName }}
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *{{ .Config.ProtoPackage }}.List{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().List(ctx, gomock.Any()).Return({{ .Config.ListVariable }}, count, nil).Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.FilterTypeName }}{
                    PageNumber: wrapperspb.UInt64(*filter.PageNumber),
                    PageSize:   wrapperspb.UInt64(*filter.PageSize),
{{- if .Config.SearchEnabled }}
                    Search:     wrapperspb.String(*filter.Search),
{{- end}}
                    OrderBy:    filter.OrderBy,
                    Ids:        stringIDs,
                },
            },
            want:    response,
            wantErr: nil,
        },
        {
            name: "usecase error",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.
                    EXPECT().
                    List(ctx, gomock.Any()).
                    Return(nil, uint64(0), errs.NewUnexpectedBehaviorError("i error")).
                    Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: &{{ .Config.ProtoPackage }}.{{ .Config.FilterTypeName }}{
                    PageNumber: wrapperspb.UInt64(*filter.PageNumber),
                    PageSize:   wrapperspb.UInt64(*filter.PageSize),
{{- if .Config.SearchEnabled }}
                    Search:     wrapperspb.String(*filter.Search),
{{- end }}
                    OrderBy:    filter.OrderBy,
                    Ids:        stringIDs,
                },
            },
            want:    nil,
            wantErr: errs.NewUnexpectedBehaviorError("i error"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            s := {{ .Config.GRPCHandlerTypeName }}{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: tt.fields.Unimplemented{{ .Config.GRPCHandlerTypeName }},
                {{ .Config.UseCaseVariableName }}:                tt.fields.{{ .Config.UseCaseVariableName }},
                logger:                            tt.fields.logger,
            }
            got, err := s.List(tt.args.ctx, tt.args.input)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test{{ .Config.GRPCHandlerTypeName }}_Update(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    mock{{ .Config.UseCaseTypeName }} := NewMock{{ .GetUseCaseInterfaceName }}(ctrl)
    mockLogger := NewMocklogger(ctrl)
    ctx := context.Background()
    {{ .Config.Variable }} := mockEntities.New{{ .Config.ModelName }}(t)
    update := mockEntities.New{{ .Config.UpdateTypeName }}(t)
    type fields struct {
        Unimplemented{{ .Config.GRPCHandlerTypeName }} {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}
        {{ .Config.UseCaseVariableName }}                {{ .GetUseCaseInterfaceName }}
        logger                            logger
    }
    type args struct {
        ctx   context.Context
        input *{{ .Config.ProtoPackage }}.{{ .Config.UpdateTypeName }}
    }
    tests := []struct {
        name    string
        setup   func()
        fields  fields
        args    args
        want    *{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}
        wantErr error
    }{
        {
            name: "ok",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().Update(ctx, gomock.Any()).Return({{ .Config.Variable }}, nil).Times(1)
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: decode{{ .Config.UpdateTypeName }}(update),
            },
            want:    decode{{ .Config.ModelName }}({{ .Config.Variable }}),
            wantErr: nil,
        },
        {
            name: "usecase error",
            setup: func() {
                mock{{ .Config.UseCaseTypeName }}.EXPECT().Update(ctx, gomock.Any()).
                    Return(entities.{{ .Config.ModelName }}{}, errs.NewUnexpectedBehaviorError("i error"))
            },
            fields: fields{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: {{ .Config.ProtoPackage }}.Unimplemented{{ .Config.GRPCHandlerTypeName }}{},
                {{ .Config.UseCaseVariableName }}: mock{{ .Config.UseCaseTypeName }},
                logger: mockLogger,
            },
            args: args{
                ctx: ctx,
                input: decode{{ .Config.UpdateTypeName }}(update),
            },
            want:    nil,
            wantErr: errs.NewUnexpectedBehaviorError("i error"),
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            s := {{ .Config.GRPCHandlerTypeName }}{
                Unimplemented{{ .Config.GRPCHandlerTypeName }}: tt.fields.Unimplemented{{ .Config.GRPCHandlerTypeName }},
                {{ .Config.UseCaseVariableName }}:                tt.fields.{{ .Config.UseCaseVariableName }},
                logger:                            tt.fields.logger,
            }
            got, err := s.Update(tt.args.ctx, tt.args.input)
            assert.ErrorIs(t, err, tt.wantErr)
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test_decode{{ .Config.ModelName }}(t *testing.T) {
    {{ .Config.Variable }} := mockEntities.New{{ .Config.ModelName }}(t)
    result := &{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}{
        Id:          string({{ .Config.Variable }}.ID),
        UpdatedAt:   timestamppb.New({{ .Config.Variable }}.UpdatedAt),
        CreatedAt:   timestamppb.New({{ .Config.Variable }}.CreatedAt),
        {{- range $value := .Config.Params }}
            {{- if $value.IsSlice }}
        {{ $value.GRPCParam }}: {{ $value.GRPCType }}{},
            {{- else }}
        {{ $value.GRPCParam }}: {{ $value.GRPCType }}({{ $.Config.Variable }}.{{ $value.GetName }}),
            {{- end }}
        {{- end }}
    }
{{- range $value := .Config.Params }}
    {{- if $value.IsSlice }}
    for _, param := range {{ $.Config.Variable }}.{{ $value.GetName }} {
        result.{{ $value.GRPCParam }} = append(result.{{ $value.GRPCParam }}, {{ $value.GRPCSliceType }}(param))
    }
    {{- end }}
{{- end }}
    type args struct {
        {{ .Config.Variable }} entities.{{ .Config.ModelName }}
    }
    tests := []struct {
        name string
        args args
        want *{{ .Config.ProtoPackage }}.{{ .Config.ModelName }}
    }{
        {
            name: "ok",
            args: args{
                {{ .Config.Variable }}: {{ .Config.Variable }},
            },
            want: result,
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            got := decode{{ .Config.ModelName }}(tt.args.{{ .Config.Variable }})
            assert.Equal(t, tt.want, got)
        })
    }
}

func Test_encode{{ .Config.FilterTypeName }}(t *testing.T) {
    id := uuid.UUID(uuid.NewUUID())
    type args struct {
        input *{{ .Config.ProtoPackage }}.{{ .Config.FilterTypeName }}
    }
    tests := []struct {
        name string
        args args
        want entities.{{ .Config.FilterTypeName }}
    }{
        {
            name: "ok",
            args: args{
                input: &{{ .Config.ProtoPackage }}.{{ .Config.FilterTypeName }}{
                    PageNumber: wrapperspb.UInt64(2),
                    PageSize:   wrapperspb.UInt64(5),
{{- if .Config.SearchEnabled }}
                    Search:     wrapperspb.String("my name is"),
{{- end}}
                    OrderBy:    []string{"created_at", "id"},
                    Ids:        []string{string(id)},
                },
            },
            want: entities.{{ .Config.FilterTypeName }}{
                PageSize:   pointer.Pointer(uint64(5)),
                PageNumber: pointer.Pointer(uint64(2)),
                OrderBy:    []string{"created_at", "id"},
{{- if .Config.SearchEnabled }}
                Search:     pointer.Pointer("my name is"),
{{- end}}
                IDs:        []uuid.UUID{id},
            },
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            got := encode{{ .Config.FilterTypeName }}(tt.args.input)
            assert.Equal(t, tt.want, got)
        })
    }
}
