package rest

import (
    "context"
	"errors"
    "{{ .Module }}/internal/configs"
	"{{ .Module }}/internal/domain/errs"
    "github.com/gin-contrib/cors"
    "net/http"

    "{{ .Module }}/pkg/log"
    "github.com/gin-gonic/gin"
)

type ctxKey string

const (
{{- if .Auth }}
    UserContextKey      ctxKey = "user"
{{- end }}
    RequestIDContextKey ctxKey = "request_id"
)

type Server struct {
    router *gin.Engine
    config *configs.Config
    logger log.Logger
}

// NewServer        godoc
// @title           {{ .Name }}
// @version         0.1.0
// @description     TBD
// @host      127.0.0.1:8000
// @BasePath  /api/v1
// @schemes https http
//
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
//
// @security ApiKeyAuth
func NewServer(
    logger log.Logger,
    config *configs.Config,
{{- if .Auth }}
    authMiddleware *AuthMiddleware,
    authHandler *AuthHandler,
    userHandler *UserHandler,
{{- end }}
{{- range $value := .Models }}
    {{ $value.RESTHandlerVariableName }} *{{ $value.RESTHandlerTypeName }},
{{- end }}
) *Server {
    router := gin.Default()
{{- if .Auth }}
    router.Use(authMiddleware.Middleware())
{{- end }}
    router.Use(cors.Default())
    router.Use(RequestMiddleware)
    router.GET("/", func(c *gin.Context) {
        c.Status(http.StatusOK)
    })
    router.GET("/health", func(c *gin.Context) {
        c.JSON(http.StatusOK, gin.H{
            "message": "ok",
        })
    })
    apiV1 := router.Group("api").Group("v1")
{{- if .Auth }}
    authHandler.Register(apiV1)
    userHandler.Register(apiV1)
{{- end }}
{{- range $value := .Models }}
    {{ $value.RESTHandlerVariableName }}.Register(apiV1)
{{- end }}
    return &Server{
        router: router,
        config: config,
        logger: logger,
    }
}

func(s *Server) Start(_ context.Context) error {
    return http.ListenAndServe(s.config.BindAddr, s.router)
}

func(s *Server) Stop(_ context.Context) error {
    return nil
}

func decodeError(ctx *gin.Context, err error) {
	ctx.JSON(http.StatusBadRequest, err)
	var domainError *errs.Error
	if errors.As(err, &domainError) {
		switch domainError.Code {
		case errs.ErrorCodeOK:
			ctx.JSON(http.StatusOK, err)
		case errs.ErrorCodeCanceled:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeUnknown:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeInvalidArgument:
			ctx.JSON(http.StatusBadRequest, err)
		case errs.ErrorCodeDeadlineExceeded:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeNotFound:
			ctx.JSON(http.StatusNotFound, err)
		case errs.ErrorCodeAlreadyExists:
			ctx.JSON(http.StatusBadRequest, err)
		case errs.ErrorCodePermissionDenied:
			ctx.JSON(http.StatusForbidden, err)
		case errs.ErrorCodeResourceExhausted:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeFailedPrecondition:
			ctx.JSON(http.StatusBadRequest, err)
		case errs.ErrorCodeAborted:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeOutOfRange:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeUnimplemented:
			ctx.JSON(http.StatusMethodNotAllowed, err)
		case errs.ErrorCodeInternal:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeUnavailable:
			ctx.JSON(http.StatusServiceUnavailable, err)
		case errs.ErrorCodeDataLoss:
			ctx.JSON(http.StatusInternalServerError, err)
		case errs.ErrorCodeUnauthenticated:
			ctx.JSON(http.StatusUnauthorized, err)
		default:
			ctx.JSON(http.StatusInternalServerError, err)
		}
		return
	}
	ctx.String(http.StatusInternalServerError, err.Error())
}
