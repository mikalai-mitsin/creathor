package usecases

import (
    "context"

    "{{ .Module }}/internal/domain/errs"
    "{{ .Module }}/internal/domain/models"
    "{{ .Module }}/internal/domain/repositories"
    "{{ .Module }}/internal/domain/usecases"

    "{{ .Module }}/pkg/clock"
    "{{ .Module }}/pkg/log"
)

type {{ .UseCaseTypeName }} struct {
    {{ .RepositoryVariableName }} repositories.{{ .RepositoryTypeName }}
    clock clock.Clock
    logger log.Logger
}

func New{{ .UseCaseTypeName }}(
    {{ .RepositoryVariableName }} repositories.{{ .RepositoryTypeName }},
    clock clock.Clock,
    logger log.Logger,
) usecases.{{ .UseCaseTypeName }} {
    return &{{ .UseCaseTypeName }}{
        {{ .RepositoryVariableName }}: {{ .RepositoryVariableName }},
        clock:  clock,
        logger: logger,
    }
}

func (u *{{ .UseCaseTypeName }}) Get(
    ctx context.Context,
    id string,
) (*models.{{ .ModelName }}, *errs.Error ) {
    {{ .Variable }}, err := u.{{ .RepositoryVariableName }}.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return {{ .Variable }}, nil
}

func (u *{{ .UseCaseTypeName }}) List(
    ctx context.Context,
    filter *models.{{ .FilterTypeName }},
) ([]*models.{{ .ModelName }}, uint64, *errs.Error ) {
    {{ .ListVariable }}, err := u.{{ .RepositoryVariableName }}.List(ctx, filter)
    if err != nil {
        return nil, 0, err
    }
    count, err := u.{{ .RepositoryVariableName }}.Count(ctx, filter)
    if err != nil {
        return nil, 0, err
    }
    return {{ .ListVariable }}, count, nil
}

func (u *{{ .UseCaseTypeName }}) Create(
    ctx context.Context,
    create *models.{{ .ModelName }}Create,
) (*models.{{ .ModelName }}, *errs.Error ) {
    if err := create.Validate(); err != nil {
        return nil, err
    }
    now := u.clock.Now().UTC()
    {{ .Variable }} := &models.{{ .ModelName }}{
        ID: "",
{{- range $key, $value := .Params }}
        {{ $key.Name }}: create.{{ $key.Name }},
{{- end }}
        UpdatedAt: now,
        CreatedAt: now,
    }
    if err := u.{{ .RepositoryVariableName }}.Create(ctx, {{ .Variable }}); err != nil {
        return nil, err
    }
    return {{ .Variable }}, nil
}

func (u *{{ .UseCaseTypeName }}) Update(
    ctx context.Context,
    update *models.{{ .ModelName }}Update,
) (*models.{{ .ModelName }}, *errs.Error ) {
    if err := update.Validate(); err != nil {
        return nil, err
    }
    {{ .Variable }}, err := u.{{ .RepositoryVariableName }}.Get(ctx, update.ID)
    if err != nil {
        return nil, err
    }
{{- range $key, $value := .Params }}
    if update.{{ $key.Name }} != nil {
        {{ $.Variable }}.{{ $key.Name }} = *update.{{ $key.Name }}
    }
{{- end }}
    {{ .Variable }}.UpdatedAt = u.clock.Now()
    if err := u.{{ .RepositoryVariableName }}.Update(ctx, {{ .Variable }}); err != nil {
        return nil, err
    }
    return {{ .Variable }}, nil
}

func (u *{{ .UseCaseTypeName }}) Delete(ctx context.Context, id string) *errs.Error {
    if err := u.{{ .RepositoryVariableName }}.Delete(ctx, id); err != nil {
        return err
    }
    return nil
}
