package events

import (
	"context"
	"encoding/json"
    "{{ .Module }}/internal/app/{{ .AppName }}/entities/{{ .DirName }}"
	"{{ .Module }}/internal/pkg/clock"
	"github.com/IBM/sarama"
)

type logger interface {
	Debug(msg string, fields ...log.Field)
	Info(msg string, fields ...log.Field)
	Print(msg string, fields ...log.Field)
	Warn(msg string, fields ...log.Field)
	Error(msg string, fields ...log.Field)
	Fatal(msg string, fields ...log.Field)
	Panic(msg string, fields ...log.Field)
}

type kafka interface {
	sarama.SyncProducer
}

type {{ .EventProducerTypeName }} struct {
	producer kafka
	logger   logger
}

func {{ .EventProducerConstructorName }}(
	producer kafka,
	logger logger,
) *{{ .EventProducerTypeName }} {
	return &{{ .EventProducerTypeName }}{producer: producer, logger: logger}
}

func (p *{{ .EventProducerTypeName }}) Created(_ context.Context, {{ .GetOneVariableName }} entities.{{ .GetMainModel.Name }}) error {
	data, err := json.Marshal({{ .GetOneVariableName }})
	if err != nil {
		return err
	}
	message := &sarama.ProducerMessage{
		Topic: "{{ .CreatedTopicName }}",
		Value: sarama.ByteEncoder(data),
	}
	if _, _, err := p.producer.SendMessage(message); err != nil {
		return err
	}
	return nil
}

func (p *{{ .EventProducerTypeName }}) Updated(_ context.Context, {{ .GetOneVariableName }} entities.{{ .GetMainModel.Name }}) error {
	data, err := json.Marshal({{ .GetOneVariableName }})
	if err != nil {
		return err
	}
	message := &sarama.ProducerMessage{
		Topic: "{{ .UpdatedTopicName }}",
		Value: sarama.ByteEncoder(data),
	}
	if _, _, err := p.producer.SendMessage(message); err != nil {
		return err
	}
	return nil
}

func (p *{{ .EventProducerTypeName }}) Deleted(_ context.Context, id uuid.UUID) error {
	message := &sarama.ProducerMessage{
		Topic: "{{ .UpdatedTopicName }}",
		Value: sarama.ByteEncoder(id.String()),
	}
	if _, _, err := p.producer.SendMessage(message); err != nil {
		return err
	}
	return nil
}
