package models

import (
	"{{ .Module }}/internal/domain/errs"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	"github.com/go-ozzo/ozzo-validation/v4/is"
	"time"
)

type {{ .ModelName }} struct {
	ID        string `json:"id" db:"id,omitempty"`
	UpdatedAt time.Time `json:"updated_at" db:"updated_at,omitempty"`
	CreatedAt time.Time `json:"created_at" db:"created_at,omitempty"`
}

func (c *{{ .ModelName }}) Validate() error {
    err := validation.ValidateStruct(
        c,
        validation.Field(&c.ID, is.UUID),
    )
    if err != nil {
        return errs.FromValidationError(err)
    }
    return nil
}

type {{ .FilterTypeName }} struct {
    IDs        []string `json:"ids"`
    PageSize   *uint64  `json:"page_size"`
    PageNumber *uint64  `json:"page_number"`
    OrderBy    []string `json:"order_by"`
}

func (c *{{ .FilterTypeName }}) Validate() error {
	err := validation.ValidateStruct(
		c,
		validation.Field(&c.IDs),
		validation.Field(&c.PageSize),
		validation.Field(&c.PageNumber),
		validation.Field(&c.OrderBy),
	)
	if err != nil {
		return errs.FromValidationError(err)
	}
	return nil
}

type {{ .CreateTypeName }} struct {
}

func (c *{{ .CreateTypeName }}) Validate() error {
	err := validation.ValidateStruct(
		c,
	)
	if err != nil {
		return errs.FromValidationError(err)
	}
	return nil
}

type {{ .UpdateTypeName }} struct {
	ID string `json:"id"`
}

func (c *{{ .UpdateTypeName }}) Validate() error {
    err := validation.ValidateStruct(
        c,
        validation.Field(&c.ID, validation.Required, is.UUID),
    )
    if err != nil {
        return errs.FromValidationError(err)
    }
    return nil
}
{{ if .Auth }}
const (
	PermissionID{{ .ModelName }}List   PermissionID = "{{ .KeyName }}_list"
	PermissionID{{ .ModelName }}Detail PermissionID = "{{ .KeyName }}_detail"
	PermissionID{{ .ModelName }}Create PermissionID = "{{ .KeyName }}_create"
	PermissionID{{ .ModelName }}Update PermissionID = "{{ .KeyName }}_update"
	PermissionID{{ .ModelName }}Delete PermissionID = "{{ .KeyName }}_delete"
)
{{ end }}