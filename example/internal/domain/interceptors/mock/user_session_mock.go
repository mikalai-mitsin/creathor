// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/018bf/example/internal/domain/interceptors (interfaces: UserSessionInterceptor)

// Package mock_interceptors is a generated GoMock package.
package mock_interceptors

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/example/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserSessionInterceptor is a mock of UserSessionInterceptor interface.
type MockUserSessionInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockUserSessionInterceptorMockRecorder
}

// MockUserSessionInterceptorMockRecorder is the mock recorder for MockUserSessionInterceptor.
type MockUserSessionInterceptorMockRecorder struct {
	mock *MockUserSessionInterceptor
}

// NewMockUserSessionInterceptor creates a new mock instance.
func NewMockUserSessionInterceptor(ctrl *gomock.Controller) *MockUserSessionInterceptor {
	mock := &MockUserSessionInterceptor{ctrl: ctrl}
	mock.recorder = &MockUserSessionInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSessionInterceptor) EXPECT() *MockUserSessionInterceptorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserSessionInterceptor) Create(arg0 context.Context, arg1 *models.UserSessionCreate, arg2 *models.User) (*models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserSessionInterceptorMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSessionInterceptor)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockUserSessionInterceptor) Delete(arg0 context.Context, arg1 string, arg2 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserSessionInterceptorMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSessionInterceptor)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockUserSessionInterceptor) Get(arg0 context.Context, arg1 string, arg2 *models.User) (*models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserSessionInterceptorMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserSessionInterceptor)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockUserSessionInterceptor) List(arg0 context.Context, arg1 *models.UserSessionFilter, arg2 *models.User) ([]*models.UserSession, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.UserSession)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUserSessionInterceptorMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserSessionInterceptor)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockUserSessionInterceptor) Update(arg0 context.Context, arg1 *models.UserSessionUpdate, arg2 *models.User) (*models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserSessionInterceptorMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSessionInterceptor)(nil).Update), arg0, arg1, arg2)
}
