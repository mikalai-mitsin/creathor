// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/018bf/example/internal/domain/usecases (interfaces: AuthUseCase)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	models "github.com/018bf/example/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthUseCase) Auth(arg0 context.Context, arg1 models.Token) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthUseCaseMockRecorder) Auth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthUseCase)(nil).Auth), arg0, arg1)
}

// CreateToken mocks base method.
func (m *MockAuthUseCase) CreateToken(arg0 context.Context, arg1 *models.Login) (*models.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(*models.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthUseCaseMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthUseCase)(nil).CreateToken), arg0, arg1)
}

// CreateTokenByUser mocks base method.
func (m *MockAuthUseCase) CreateTokenByUser(arg0 context.Context, arg1 *models.User) (*models.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenByUser", arg0, arg1)
	ret0, _ := ret[0].(*models.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenByUser indicates an expected call of CreateTokenByUser.
func (mr *MockAuthUseCaseMockRecorder) CreateTokenByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenByUser", reflect.TypeOf((*MockAuthUseCase)(nil).CreateTokenByUser), arg0, arg1)
}

// HasObjectPermission mocks base method.
func (m *MockAuthUseCase) HasObjectPermission(arg0 context.Context, arg1 *models.User, arg2 models.PermissionID, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasObjectPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasObjectPermission indicates an expected call of HasObjectPermission.
func (mr *MockAuthUseCaseMockRecorder) HasObjectPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasObjectPermission", reflect.TypeOf((*MockAuthUseCase)(nil).HasObjectPermission), arg0, arg1, arg2, arg3)
}

// HasPermission mocks base method.
func (m *MockAuthUseCase) HasPermission(arg0 context.Context, arg1 *models.User, arg2 models.PermissionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockAuthUseCaseMockRecorder) HasPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockAuthUseCase)(nil).HasPermission), arg0, arg1, arg2)
}

// RefreshToken mocks base method.
func (m *MockAuthUseCase) RefreshToken(arg0 context.Context, arg1 models.Token) (*models.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*models.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthUseCaseMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthUseCase)(nil).RefreshToken), arg0, arg1)
}

// ValidateToken mocks base method.
func (m *MockAuthUseCase) ValidateToken(arg0 context.Context, arg1 models.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthUseCaseMockRecorder) ValidateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthUseCase)(nil).ValidateToken), arg0, arg1)
}
