package grpc

import (
    "context"
    "errors"
    "fmt"
    "reflect"
    "testing"

    "{{ .Module }}/internal/pkg/errs"
    "{{ .Module }}/internal/app/auth/entities"
    mock_user_entities "{{ .Module }}/internal/app/user/entities/mock"
    mock_entities "{{ .Module }}/internal/app/auth/entities/mock"
    mock_grpc "{{ .Module }}/internal/pkg/grpc/mock"

    "go.uber.org/mock/gomock"

    "google.golang.org/grpc/metadata"
)

type Transport struct {
    MethodPath string
}

func (t Transport) Method() string {
    return t.MethodPath
}

func (t Transport) SetHeader(_ metadata.MD) error {
    return nil
}

func (t Transport) SendHeader(_ metadata.MD) error {
    return nil
}

func (t Transport) SetTrailer(_ metadata.MD) error {
    return nil
}

func TestAuthMiddleware_Auth(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    authUseCase := mock_grpc.NewMockAuthUseCase(ctrl)
    ctx := context.Background()
    token := mock_entities.NewToken(t)
    user := mock_user_entities.NewUser(t)
    ctxWithToken := metadata.NewIncomingContext(ctx, metadata.New(map[string]string{
        "authorization": fmt.Sprintf("Bearer %s", token.String()),
    }))
    ctxWithBadToken := metadata.NewIncomingContext(ctx, metadata.New(map[string]string{
        "authorization": fmt.Sprintf("Bearer %s", "token.String()"),
    }))
    type fields struct {
        authUseCase AuthUseCase
    }
    type args struct {
        ctx context.Context
    }
    tests := []struct {
        name    string
        fields  fields
        args    args
        want    context.Context
        wantErr error
        setup   func()
    }{
        {
            name: "ok",
            setup: func() {
                authUseCase.EXPECT().Auth(ctxWithToken, token).Return(user, nil)
            },
            fields: fields{
                authUseCase: authUseCase,
            },
            args: args{
                ctx: ctxWithToken,
            },
            want:    context.WithValue(ctxWithToken, UserKey, user),
            wantErr: nil,
        },
        {
            name: "bad token",
            setup: func() {
                authUseCase.EXPECT().
                    Auth(ctxWithBadToken, entities.Token("token.String()")).
                    Return(nil, errs.NewBadTokenError()).
                    Times(1)
            },
            fields: fields{
                authUseCase: authUseCase,
            },
            args: args{
                ctx: ctxWithBadToken,
            },
            want:    nil,
            wantErr: errs.NewBadTokenError(),
        },
        {
            name:  "without token",
            setup: func() {},
            fields: fields{
                authUseCase: authUseCase,
            },
            args: args{
                ctx: ctx,
            },
            want:    context.WithValue(ctx, UserKey, entities.Guest),
            wantErr: nil,
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            tt.setup()
            m := AuthMiddleware{
                authUseCase: tt.fields.authUseCase,
            }
            got, err := m.Auth(tt.args.ctx)
            if !errors.Is(err, tt.wantErr) {
                t.Errorf("Auth() error = %v, wantErr %v", err, tt.wantErr)
                return
            }
            if !reflect.DeepEqual(got, tt.want) {
                t.Errorf("Auth() got = %v, want %v", got, tt.want)
            }
        })
    }
}

func TestNewAuthMiddleware(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    authUseCase := mock_grpc.NewMockAuthUseCase(ctrl)
    type args struct {
        authUseCase AuthUseCase
        logger          logger
    }
    tests := []struct {
        name string
        args args
        want *AuthMiddleware
    }{
        {
            name: "ok",
            args: args{
                authUseCase: authUseCase,
            },
            want: &AuthMiddleware{
                authUseCase: authUseCase,
            },
        },
    }
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            if got := NewAuthMiddleware(tt.args.authUseCase, tt.args.logger); !reflect.DeepEqual(got, tt.want) {
                t.Errorf("NewAuthMiddleware() = %v, want %v", got, tt.want)
            }
        })
    }
}
