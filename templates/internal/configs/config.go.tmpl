package configs

import (
    "{{ .Module }}/internal/domain/errs"
    "github.com/ilyakaznacheev/cleanenv"
)
{{- if .KafkaEnabled }}
type kafka struct {
    Topic string `env:"KAFKA_TOPIC" toml:"topic" `
    Host  string `env:"KAFKA_HOST"  toml:"host"`
    Port  int    `env:"KAFKA_PORT"  toml:"port" `
}
{{- end }}

{{- if .UptraceEnabled }}
type otel struct {
    URL         string `env:"OTEL_URL" toml:"url"`
    Enabled     bool   `env:"OTEL_ENABLED" toml:"enabled"`
    Environment string `env:"OTEL_ENVIRONMENT" toml:"environment"`
}
{{- end }}

{{ if .Auth }}
type auth struct {
    PublicKey  string `env:"AUTH_PUBLIC_KEY" toml:"public_key"`
    PrivateKey string `env:"AUTH_PRIVATE_KEY" toml:"private_key"`
    RefreshTTL int64  `env:"AUTH_REFRESH_TTL"  env-default:"172800"  toml:"refresh_ttl"`
    AccessTTL  int64  `env:"AUTH_ACCESS_TTL"  env-default:"86400"  toml:"access_ttl"`
}
{{- end }}

type database struct {
    URI                string `env:"DATABASE_URI" toml:"uri"`
    MaxOpenConnections int    `env:"DATABASE_MAX_OPEN_CONNECTIONS" env-default:"50"  toml:"max_open_connections"`
    MaxIDLEConnections int    `env:"DATABASE_MAX_IDLE_CONNECTIONS" env-default:"10"  toml:"max_idle_connections"`
}

type Config struct {
    BindAddr string   `env:"BIND_ADDR" toml:"bind_addr" env-default:":8000"`
    LogLevel string   `env:"LOG_LEVEL" toml:"log_level" env-default:"debug"`
    Database database `toml:"database"`
{{- if .Auth }}
    Auth     auth     `toml:"auth"`
{{- end }}
{{- if .UptraceEnabled }}
    Otel     otel     `toml:"otel"`
{{- end }}
{{- if .KafkaEnabled }}
    Kafka    kafka    `toml:"kafka"`
{{- end }}
}

func ParseConfig(configPath string) (*Config, error) {
    config := &Config{}
    if configPath != "" {
        if err := cleanenv.ReadConfig(configPath, config); err != nil {
            return nil, errs.NewUnexpectedBehaviorError(err.Error())
        }
    } else {
        if err := cleanenv.ReadEnv(config); err != nil {
            return nil, errs.NewUnexpectedBehaviorError(err.Error())
        }
    }
    return config, nil
}
