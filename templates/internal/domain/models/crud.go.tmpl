package models

import (
    "time"

    "{{ .Module }}/internal/domain/errs"
    validation "github.com/go-ozzo/ozzo-validation/v4"
    "github.com/go-ozzo/ozzo-validation/v4/is"
)

type {{ .ModelName }} struct {
    ID        string `json:"id" db:"id,omitempty" form:"id"`
{{- range $key, $value := .Params }}
    {{ $key.Name }} {{ $value }} `json:"{{ $key.Tag }}" db:"{{ $key.Tag }}" form:"{{ $key.Tag }}"`
{{- end }}
    UpdatedAt time.Time `json:"updated_at" db:"updated_at,omitempty" form:"updated_at"`
    CreatedAt time.Time `json:"created_at" db:"created_at,omitempty" form:"created_at,omitempty"`
}

func (c *{{ .ModelName }}) Validate() error {
    err := validation.ValidateStruct(
        c,
        validation.Field(&c.ID, is.UUID),
{{- range $key, $value := .Params }}
        validation.Field(&c.{{ $key.Name }}),
{{- end }}
    )
    if err != nil {
        return errs.FromValidationError(err)
    }
    return nil
}

type {{ .FilterTypeName }} struct {
    IDs        []string `json:"ids" form:"ids"`
    PageSize   *uint64  `json:"page_size" form:"page_size"`
    PageNumber *uint64  `json:"page_number" form:"page_number"`
    OrderBy    []string `json:"order_by" form:"order_by"`
}

func (c *{{ .FilterTypeName }}) Validate() error {
    err := validation.ValidateStruct(
        c,
        validation.Field(&c.IDs),
        validation.Field(&c.PageSize),
        validation.Field(&c.PageNumber),
        validation.Field(&c.OrderBy),
    )
    if err != nil {
        return errs.FromValidationError(err)
    }
    return nil
}

type {{ .CreateTypeName }} struct {
{{- range $key, $value := .Params }}
    {{ $key.Name }} {{ $value }} `json:"{{ $key.Tag }}" form:"{{ $key.Tag }}"`
{{- end }}
}

func (c *{{ .CreateTypeName }}) Validate() error {
    err := validation.ValidateStruct(
        c,
{{- range $key, $value := .Params }}
        validation.Field(&c.{{ $key.Name }}),
{{- end }}
    )
    if err != nil {
        return errs.FromValidationError(err)
    }
    return nil
}

type {{ .UpdateTypeName }} struct {
    ID string `json:"id"`
{{- range $key, $value := .Params }}
    {{ $key.Name }} *{{ $value }} `json:"{{ $key.Tag }}" form:"{{ $key.Tag }}"`
{{- end }}
}

func (c *{{ .UpdateTypeName }}) Validate() error {
    err := validation.ValidateStruct(
        c,
        validation.Field(&c.ID, validation.Required, is.UUID),
{{- range $key, $value := .Params }}
        validation.Field(&c.{{ $key.Name }}),
{{- end }}
    )
    if err != nil {
        return errs.FromValidationError(err)
    }
    return nil
}
{{ if .Auth }}
const (
    PermissionID{{ .ModelName }}List   PermissionID = "{{ .KeyName }}_list"
    PermissionID{{ .ModelName }}Detail PermissionID = "{{ .KeyName }}_detail"
    PermissionID{{ .ModelName }}Create PermissionID = "{{ .KeyName }}_create"
    PermissionID{{ .ModelName }}Update PermissionID = "{{ .KeyName }}_update"
    PermissionID{{ .ModelName }}Delete PermissionID = "{{ .KeyName }}_delete"
)
{{ end }}