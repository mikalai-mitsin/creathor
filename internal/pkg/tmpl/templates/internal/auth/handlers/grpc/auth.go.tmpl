package handlers

import (
	"context"
	"{{ .Module }}/internal/app/auth/entities"
	{{ .ProtoPackage }} "{{ .Module }}/pkg/{{ .ProtoPackage }}/v1"
	"strings"
)

type AuthServiceServer struct {
	{{ .ProtoPackage }}.UnimplementedAuthServiceServer
	authUseCase authUseCase
    logger logger
}

func NewAuthServiceServer(
	authUseCase authUseCase,
	logger logger,
) *AuthServiceServer {
	return &AuthServiceServer{authUseCase: authUseCase, logger: logger}
}

func (s AuthServiceServer) CreateToken(
	ctx context.Context,
	input *{{ .ProtoPackage }}.CreateToken,
) (*{{ .ProtoPackage }}.TokenPair, error) {
	login := entities.Login{
		Email:    strings.ToLower(input.GetEmail()),
		Password: input.GetPassword(),
	}
	tokenPair, err := s.authUseCase.CreateToken(ctx, login)
	if err != nil {
		return nil, err
	}
	return decodeTokenPair(tokenPair), nil
}

func (s AuthServiceServer) RefreshToken(
	ctx context.Context,
	input *{{ .ProtoPackage }}.RefreshToken,
) (*{{ .ProtoPackage }}.TokenPair, error) {
	tokenPair, err := s.authUseCase.RefreshToken(ctx, entities.Token(input.GetToken()))
	if err != nil {
		return nil, err
	}
	return decodeTokenPair(tokenPair), nil
}

func decodeTokenPair(pair entities.TokenPair) *{{ .ProtoPackage }}.TokenPair {
	return &{{ .ProtoPackage }}.TokenPair{
		Access:  pair.Access.String(),
		Refresh: pair.Refresh.String(),
	}
}
