package interceptors

import (
    "context"

    "{{ .Module }}/internal/domain/interceptors"
    "{{ .Module }}/internal/domain/models"
    "{{ .Module }}/internal/domain/usecases"

    "{{ .Module }}/pkg/log"
)


func (i *{{ .InterceptorTypeName }}) List(
    ctx context.Context,
    filter *models.{{ .FilterTypeName }},
{{- if .Auth}}
    requestUser *models.User,
{{- end}}
) ([]*models.{{ .ModelName }}, uint64, error) {
    {{- if .Auth }}
    if err := i.authUseCase.HasPermission(
        ctx,
        requestUser,
        models.{{ .PermissionIDList }},
    ); err != nil {
        return nil, 0, err
    }
    if err := i.authUseCase.HasObjectPermission(
        ctx,
        requestUser,
        models.{{ .PermissionIDList }},
        filter,
    ); err != nil {
        return nil, 0, err
    }
    {{- end }}
    {{ .ListVariable }}, count, err := i.{{ .UseCaseVariableName }}.List(ctx, filter)
    if err != nil {
        return nil, 0, err
    }
    return {{ .ListVariable }}, count, nil
}

func (i *{{ .InterceptorTypeName }}) Update(
    ctx context.Context,
    update *models.{{ .UpdateTypeName }},
{{- if .Auth}}
    requestUser *models.User,
{{- end }}
) (*models.{{ .ModelName }}, error) {
    {{- if .Auth }}
    if err := i.authUseCase.HasPermission(
        ctx,
        requestUser,
        models.{{ .PermissionIDUpdate }},
    ); err != nil {
        return nil, err
    }
    {{ .Variable }}, err := i.{{ .UseCaseVariableName }}.Get(ctx, update.ID)
    if err != nil {
        return nil, err
    }
    if err := i.authUseCase.HasObjectPermission(
        ctx,
        requestUser,
        models.{{ .PermissionIDUpdate }},
        {{ .Variable }},
    ); err != nil {
        return nil, err
    }
    {{- end }}
    updated{{ .ModelName }}, err := i.{{ .UseCaseVariableName }}.Update(ctx, update)
    if err != nil {
        return nil, err
    }
    return updated{{ .ModelName }}, nil
}

func (i *{{ .InterceptorTypeName }}) Delete(
    ctx context.Context,
    id models.UUID,
{{- if .Auth}}
    requestUser *models.User,
{{- end}}
) error {
{{- if .Auth }}
    if err := i.authUseCase.HasPermission(
        ctx,
        requestUser,
        models.{{ .PermissionIDDelete }},
    ); err != nil {
        return err
    }
    {{ .Variable }}, err := i.{{ .UseCaseVariableName }}.Get(ctx, id)
    if err != nil {
        return err
    }
    err = i.authUseCase.HasObjectPermission(
        ctx,
        requestUser,
        models.{{ .PermissionIDDelete }},
        {{ .Variable }},
    )
    if err != nil {
        return err
    }
{{- end }}
    if err := i.{{ .UseCaseVariableName }}.Delete(ctx, id); err != nil {
        return err
    }
    return nil
}
